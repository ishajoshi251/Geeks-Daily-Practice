class Solution:
    def l(self,root,ans):
        if root == None or root.left == None and root.right == None:
            return
        ans.append(root.data)
        if root.left != None:
            
            self.l(root.left,ans)
        else:
            
            self.l(root.right,ans)
            
        
    def m(self,root,ans):
        if root == None:
            return
        if root.left == None and root.right == None:
            ans.append(root.data)
            return
        self.m(root.left,ans)
        
        self.m(root.right,ans)
        
        
    def r(self,root,ans):
        if root == None or root.left == None and root.right == None:
            return
        if root.right != None:
            
            self.r(root.right,ans)
        else:
            
            self.r(root.left,ans)
        ans.append(root.data)
        
    def printBoundaryView(self, root):
        # Code here
        ans = []
        if root == None:
            return None
        if root.left == None and root.right == None:
            return [root.data]
        ans.append(root.data)
        self.l(root.left,ans)
        self.m(root.left,ans)
        self.m(root.right,ans)
        self.r(root.right,ans)
        return ans
