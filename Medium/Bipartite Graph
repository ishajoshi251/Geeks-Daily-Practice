class Solution:
	def isBipartite(self, V, adj):
		#code here
		'''
        color = [-1]*V
        def dfs(node,col,color,adj):
            color[node] = col
            for i in range(len(adj[node])):
                if color[i] == -1:
                    if dfs(i,1,color,adj) == False:
                        return False
                elif color[i] == col:
                    return False
            return True
                    
        for i in range(V):
            if color[i] == -1:
                if dfs(i,0,color,adj) == False:
                    return False
        return True
        '''
        
        color = [-1] * V
        for i in range(V):
            if color[i] == -1:
                if self.dfs(i, 0, color, adj) == False:
                    return False
        return True   
    
    def dfs(self, node, col, color, adj):
        color[node] = col
        for it in adj[node]:
            if color[it] == -1:
                if self.dfs(it,not col, color, adj) == False:
                    return False
            elif color[it] == col:
                return False
        return True
        
    
